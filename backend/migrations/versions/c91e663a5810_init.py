"""init

Revision ID: c91e663a5810
Revises: 
Create Date: 2024-09-06 10:34:52.401816

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c91e663a5810'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('company',
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('title', sa.String(), nullable=False),
                    sa.Column('external_number', sa.String(), nullable=True),
                    sa.Column('country', sqlalchemy_utils.types.country.CountryType(length=2),
                              nullable=False),
                    sa.Column('locale', sqlalchemy_utils.types.locale.LocaleType(), nullable=False),
                    sa.Column('currency', sqlalchemy_utils.types.currency.CurrencyType(length=3),
                              nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('external_number')
                    )
    op.create_index(op.f('ix_company_id'), 'company', ['id'], unique=False)
    op.create_index(op.f('ix_company_lsn'), 'company', ['lsn'], unique=False)
    op.create_index(op.f('ix_company_title'), 'company', ['title'], unique=False)
    op.create_table('bus',
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('cache_tag',
                              sa.Enum('GET_USER_LIST', 'WS_SESSION', 'MESSAGE', 'MODEL',
                                      name='cachetag'), nullable=False),
                    sa.Column('message', sa.String(), nullable=False),
                    sa.Column('status',
                              sa.Enum('NEW', 'PROCESSING', 'ERROR', 'DELIVERED', name='busstatus'),
                              nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_bus_cache_tag'), 'bus', ['cache_tag'], unique=False)
    op.create_index(op.f('ix_bus_company_id'), 'bus', ['company_id'], unique=False)
    op.create_index(op.f('ix_bus_id'), 'bus', ['id'], unique=False)
    op.create_index(op.f('ix_bus_lsn'), 'bus', ['lsn'], unique=False)
    op.create_index(op.f('ix_bus_status'), 'bus', ['status'], unique=False)
    op.create_table('lot',
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('expiration_datetime', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('product_id', sa.Uuid(), nullable=True),
                    sa.Column('external_number', sa.String(), nullable=False),
                    sa.Column('partner_id', sa.Uuid(), nullable=True),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('external_number'),
                    sa.UniqueConstraint('external_number', 'product_id', 'partner_id',
                                        name='_lot_ex_pr_par_id_uc')
                    )
    op.create_index(op.f('ix_lot_company_id'), 'lot', ['company_id'], unique=False)
    op.create_index(op.f('ix_lot_id'), 'lot', ['id'], unique=False)
    op.create_index(op.f('ix_lot_lsn'), 'lot', ['lsn'], unique=False)
    op.create_index(op.f('ix_lot_partner_id'), 'lot', ['partner_id'], unique=False)
    op.create_index(op.f('ix_lot_product_id'), 'lot', ['product_id'], unique=False)
    op.create_table('order_type',
                    sa.Column('prefix', sa.String(), nullable=False),
                    sa.Column('title', sa.String(), nullable=False),
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('order_class',
                              sa.Enum('INCOMING', 'OUTGOING', 'INTERNAL', name='orderclass'),
                              nullable=False),
                    sa.Column('allowed_location_src_ids', sa.ARRAY(sa.Uuid()), server_default='{}',
                              nullable=False),
                    sa.Column('exclude_location_src_ids', sa.ARRAY(sa.Uuid()), server_default='{}',
                              nullable=False),
                    sa.Column('allowed_location_dest_ids', sa.ARRAY(sa.Uuid()), server_default='{}',
                              nullable=False),
                    sa.Column('exclude_location_dest_ids', sa.ARRAY(sa.Uuid()), server_default='{}',
                              nullable=False),
                    sa.Column('allowed_location_type_src_ids', sa.ARRAY(sa.Uuid()),
                              server_default='{}', nullable=False),
                    sa.Column('exclude_location_type_src_ids', sa.ARRAY(sa.Uuid()),
                              server_default='{}', nullable=False),
                    sa.Column('allowed_location_type_dest_ids', sa.ARRAY(sa.Uuid()),
                              server_default='{}', nullable=False),
                    sa.Column('exclude_location_type_dest_ids', sa.ARRAY(sa.Uuid()),
                              server_default='{}', nullable=False),
                    sa.Column('allowed_location_class_src_ids', sa.ARRAY(sa.String()),
                              server_default='{}', nullable=False),
                    sa.Column('exclude_location_class_src_ids', sa.ARRAY(sa.String()),
                              server_default='{}', nullable=False),
                    sa.Column('allowed_location_class_dest_ids', sa.ARRAY(sa.String()),
                              server_default='{}', nullable=False),
                    sa.Column('exclude_location_class_dest_ids', sa.ARRAY(sa.String()),
                              server_default='{}', nullable=False),
                    sa.Column('order_type_id', sa.Uuid(), nullable=True),
                    sa.Column('backorder_action_type',
                              sa.Enum('ASK', 'ALWAYS', 'NEVER', name='backorderaction'),
                              nullable=False),
                    sa.Column('store_id', sa.Uuid(), nullable=True),
                    sa.Column('partner_id', sa.Uuid(), nullable=True),
                    sa.Column('reservation_method',
                              sa.Enum('AT_CONFIRM', 'MANUAL', 'AT_DATE', 'TIME_BEFORE_DATE',
                                      name='reservationmethod'), nullable=False),
                    sa.Column('reservation_time_before', sa.Integer(), nullable=True),
                    sa.Column('allowed_package_ids', sa.ARRAY(sa.Uuid()), server_default='{}',
                              nullable=False),
                    sa.Column('exclude_package_ids', sa.ARRAY(sa.Uuid()), server_default='{}',
                              nullable=False),
                    sa.Column('is_homogeneity', sa.Boolean(), nullable=False),
                    sa.Column('is_allow_create_package', sa.Boolean(), nullable=False),
                    sa.Column('is_can_create_order_manualy', sa.Boolean(), nullable=False),
                    sa.Column('is_overdelivery', sa.Boolean(), nullable=False),
                    sa.Column('barcode', sa.String(), nullable=False),
                    sa.Column('strategy',
                              sa.Enum('FEFO', 'FIFO', 'LIFO', 'LEFO', name='putawaystrategy'),
                              nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.Column('created_by', sa.Uuid(), nullable=False),
                    sa.Column('edited_by', sa.Uuid(), nullable=False),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.ForeignKeyConstraint(['order_type_id'], ['order_type.id'],
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('title', 'company_id',
                                        name='_order_type_companyid_title_uc')
                    )
    op.create_index(op.f('ix_order_type_allowed_location_class_dest_ids'), 'order_type',
                    ['allowed_location_class_dest_ids'], unique=False)
    op.create_index(op.f('ix_order_type_allowed_location_class_src_ids'), 'order_type',
                    ['allowed_location_class_src_ids'], unique=False)
    op.create_index(op.f('ix_order_type_allowed_location_dest_ids'), 'order_type',
                    ['allowed_location_dest_ids'], unique=False)
    op.create_index(op.f('ix_order_type_allowed_location_src_ids'), 'order_type',
                    ['allowed_location_src_ids'], unique=False)
    op.create_index(op.f('ix_order_type_allowed_location_type_dest_ids'), 'order_type',
                    ['allowed_location_type_dest_ids'], unique=False)
    op.create_index(op.f('ix_order_type_allowed_location_type_src_ids'), 'order_type',
                    ['allowed_location_type_src_ids'], unique=False)
    op.create_index(op.f('ix_order_type_allowed_package_ids'), 'order_type',
                    ['allowed_package_ids'], unique=False)
    op.create_index(op.f('ix_order_type_company_id'), 'order_type', ['company_id'], unique=False)
    op.create_index(op.f('ix_order_type_created_by'), 'order_type', ['created_by'], unique=False)
    op.create_index(op.f('ix_order_type_edited_by'), 'order_type', ['edited_by'], unique=False)
    op.create_index(op.f('ix_order_type_exclude_location_class_dest_ids'), 'order_type',
                    ['exclude_location_class_dest_ids'], unique=False)
    op.create_index(op.f('ix_order_type_exclude_location_class_src_ids'), 'order_type',
                    ['exclude_location_class_src_ids'], unique=False)
    op.create_index(op.f('ix_order_type_exclude_location_dest_ids'), 'order_type',
                    ['exclude_location_dest_ids'], unique=False)
    op.create_index(op.f('ix_order_type_exclude_location_src_ids'), 'order_type',
                    ['exclude_location_src_ids'], unique=False)
    op.create_index(op.f('ix_order_type_exclude_location_type_dest_ids'), 'order_type',
                    ['exclude_location_type_dest_ids'], unique=False)
    op.create_index(op.f('ix_order_type_exclude_location_type_src_ids'), 'order_type',
                    ['exclude_location_type_src_ids'], unique=False)
    op.create_index(op.f('ix_order_type_exclude_package_ids'), 'order_type',
                    ['exclude_package_ids'], unique=False)
    op.create_index(op.f('ix_order_type_id'), 'order_type', ['id'], unique=False)
    op.create_index(op.f('ix_order_type_lsn'), 'order_type', ['lsn'], unique=False)
    op.create_index(op.f('ix_order_type_partner_id'), 'order_type', ['partner_id'], unique=False)
    op.create_index(op.f('ix_order_type_prefix'), 'order_type', ['prefix'], unique=False)
    op.create_index(op.f('ix_order_type_store_id'), 'order_type', ['store_id'], unique=False)
    op.create_index(op.f('ix_order_type_title'), 'order_type', ['title'], unique=False)
    op.create_table('product_category',
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('external_number', sa.String(), nullable=True),
                    sa.Column('title', sa.String(), nullable=False),
                    sa.Column('product_category_ids', sa.ARRAY(sa.Uuid()), server_default='{}',
                              nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('external_number', 'company_id',
                                        name='_product_category_company_id_uc')
                    )
    op.create_index(op.f('ix_product_category_company_id'), 'product_category', ['company_id'],
                    unique=False)
    op.create_index(op.f('ix_product_category_id'), 'product_category', ['id'], unique=False)
    op.create_index(op.f('ix_product_category_lsn'), 'product_category', ['lsn'], unique=False)
    op.create_index(op.f('ix_product_category_product_category_ids'), 'product_category',
                    ['product_category_ids'], unique=False)
    op.create_index(op.f('ix_product_category_title'), 'product_category', ['title'], unique=False)
    op.create_table('product_storage_type',
                    sa.Column('product_id', sa.Uuid(), nullable=False),
                    sa.Column('storage_uom_id', sa.Uuid(), nullable=True),
                    sa.Column('storage_image_url', sa.String(), nullable=True),
                    sa.Column('allowed_package_ids', sa.ARRAY(sa.Uuid()), server_default='{}',
                              nullable=False),
                    sa.Column('exclude_package_ids', sa.ARRAY(sa.Uuid()), server_default='{}',
                              nullable=False),
                    sa.Column('is_homogeneity', sa.Boolean(), nullable=False),
                    sa.Column('is_mix_products', sa.Boolean(), nullable=True),
                    sa.Column('storage_type_ids', sa.ARRAY(sa.Uuid()), server_default='{}',
                              nullable=False),
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('product_id', 'company_id',
                                        name='stor_type_product_company_id_uc')
                    )
    op.create_index(op.f('ix_product_storage_type_allowed_package_ids'), 'product_storage_type',
                    ['allowed_package_ids'], unique=False)
    op.create_index(op.f('ix_product_storage_type_company_id'), 'product_storage_type',
                    ['company_id'], unique=False)
    op.create_index(op.f('ix_product_storage_type_exclude_package_ids'), 'product_storage_type',
                    ['exclude_package_ids'], unique=False)
    op.create_index(op.f('ix_product_storage_type_id'), 'product_storage_type', ['id'],
                    unique=False)
    op.create_index(op.f('ix_product_storage_type_lsn'), 'product_storage_type', ['lsn'],
                    unique=False)
    op.create_index(op.f('ix_product_storage_type_product_id'), 'product_storage_type',
                    ['product_id'], unique=False)
    op.create_table('role',
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('title', sa.String(), nullable=False),
                    sa.Column('role_ids', sa.ARRAY(sa.Uuid()), server_default='{}', nullable=False,
                              comment='Список дочерних ролей'),
                    sa.Column('permission_allow_list', postgresql.ARRAY(sa.String()),
                              server_default='{}', nullable=False),
                    sa.Column('permission_deny_list', postgresql.ARRAY(sa.String()),
                              server_default='{}', nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('title', 'company_id', name='_role_company_id_uc')
                    )
    op.create_index(op.f('ix_role_company_id'), 'role', ['company_id'], unique=False)
    op.create_index(op.f('ix_role_id'), 'role', ['id'], unique=False)
    op.create_index(op.f('ix_role_lsn'), 'role', ['lsn'], unique=False)
    op.create_index(op.f('ix_role_permission_allow_list'), 'role', ['permission_allow_list'],
                    unique=False)
    op.create_index(op.f('ix_role_role_ids'), 'role', ['role_ids'], unique=False)
    op.create_index(op.f('ix_role_title'), 'role', ['title'], unique=False)
    op.create_table('storage_type',
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('title', sa.String(), nullable=False),
                    sa.Column('priority', sa.Integer(), nullable=False),
                    sa.Column('location_ids', sa.ARRAY(sa.Uuid()), server_default='{}',
                              nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_storage_type_company_id'), 'storage_type', ['company_id'],
                    unique=False)
    op.create_index(op.f('ix_storage_type_id'), 'storage_type', ['id'], unique=False)
    op.create_index(op.f('ix_storage_type_lsn'), 'storage_type', ['lsn'], unique=False)
    op.create_table('store',
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('title', sa.String(), nullable=False),
                    sa.Column('external_number', sa.String(), nullable=True),
                    sa.Column('address', sa.String(), nullable=False),
                    sa.Column('source', sa.String(), nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('external_number')
                    )
    op.create_index(op.f('ix_store_company_id'), 'store', ['company_id'], unique=False)
    op.create_index(op.f('ix_store_id'), 'store', ['id'], unique=False)
    op.create_index(op.f('ix_store_lsn'), 'store', ['lsn'], unique=False)
    op.create_index(op.f('ix_store_title'), 'store', ['title'], unique=False)
    op.create_table('uom_category',
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('title', sa.String(), nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_uom_category_company_id'), 'uom_category', ['company_id'],
                    unique=False)
    op.create_index(op.f('ix_uom_category_id'), 'uom_category', ['id'], unique=False)
    op.create_index(op.f('ix_uom_category_lsn'), 'uom_category', ['lsn'], unique=False)
    op.create_index(op.f('ix_uom_category_title'), 'uom_category', ['title'], unique=False)
    op.create_table('location_type',
                    sa.Column('title', sa.String(), nullable=False),
                    sa.Column('store_id', sa.Uuid(), nullable=True),
                    sa.Column('allowed_package_ids', sa.ARRAY(sa.Uuid()), server_default='{}',
                              nullable=False),
                    sa.Column('exclude_package_ids', sa.ARRAY(sa.Uuid()), server_default='{}',
                              nullable=False),
                    sa.Column('is_homogeneity', sa.Boolean(), nullable=True),
                    sa.Column('strategy',
                              sa.Enum('FEFO', 'FIFO', 'LIFO', 'LEFO', name='putawaystrategy'),
                              nullable=True),
                    sa.Column('is_can_negative', sa.Boolean(), server_default=sa.text('false'),
                              nullable=True),
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.Column('location_class',
                              sa.Enum('PARTNER', 'PLACE', 'RESOURCE', 'PACKAGE', 'ZONE', 'LOST',
                                      'INVENTORY', 'SCRAP', 'SCRAPPED', 'BUFFER',
                                      name='locationclass'), nullable=False),
                    sa.Column('lot_id', sa.Uuid(), nullable=True),
                    sa.Column('partner_id', sa.Uuid(), nullable=True),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.ForeignKeyConstraint(['lot_id'], ['lot.id'], ondelete='SET NULL'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_location_type_allowed_package_ids'), 'location_type',
                    ['allowed_package_ids'], unique=False)
    op.create_index(op.f('ix_location_type_company_id'), 'location_type', ['company_id'],
                    unique=False)
    op.create_index(op.f('ix_location_type_exclude_package_ids'), 'location_type',
                    ['exclude_package_ids'], unique=False)
    op.create_index(op.f('ix_location_type_id'), 'location_type', ['id'], unique=False)
    op.create_index(op.f('ix_location_type_is_can_negative'), 'location_type', ['is_can_negative'],
                    unique=False)
    op.create_index(op.f('ix_location_type_is_homogeneity'), 'location_type', ['is_homogeneity'],
                    unique=False)
    op.create_index(op.f('ix_location_type_location_class'), 'location_type', ['location_class'],
                    unique=False)
    op.create_index(op.f('ix_location_type_lot_id'), 'location_type', ['lot_id'], unique=False)
    op.create_index(op.f('ix_location_type_lsn'), 'location_type', ['lsn'], unique=False)
    op.create_index(op.f('ix_location_type_partner_id'), 'location_type', ['partner_id'],
                    unique=False)
    op.create_index(op.f('ix_location_type_store_id'), 'location_type', ['store_id'], unique=False)
    op.create_index(op.f('ix_location_type_title'), 'location_type', ['title'], unique=False)
    op.create_table('order',
                    sa.Column('number', sa.String(), nullable=False),
                    sa.Column('order_type_id', sa.Uuid(), nullable=False),
                    sa.Column('order_id', sa.Uuid(), nullable=True),
                    sa.Column('external_number', sa.String(), nullable=True),
                    sa.Column('store_id', sa.Uuid(), nullable=False),
                    sa.Column('partner_id', sa.Uuid(), nullable=True),
                    sa.Column('lot_id', sa.Uuid(), nullable=True),
                    sa.Column('origin_type', sa.String(), nullable=True),
                    sa.Column('origin_number', sa.String(), nullable=True),
                    sa.Column('planned_datetime', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('actual_datetime', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('expiration_datetime', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('user_ids', sa.ARRAY(sa.Uuid()), server_default='{}', nullable=False),
                    sa.Column('description', sa.String(), nullable=True),
                    sa.Column('status', sa.Enum('DRAFT', 'WAITING', 'CONFIRMED', 'ASSIGNED', 'DONE',
                                                'CANCELED', name='orderstatus'), nullable=False),
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.Column('created_by', sa.Uuid(), nullable=False),
                    sa.Column('edited_by', sa.Uuid(), nullable=False),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.ForeignKeyConstraint(['lot_id'], ['lot.id'], ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(['order_id'], ['order.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['order_type_id'], ['order_type.id'],
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('external_number', 'company_id',
                                        name='_order_companyid_external_number_uc')
                    )
    op.create_index(op.f('ix_order_company_id'), 'order', ['company_id'], unique=False)
    op.create_index(op.f('ix_order_created_by'), 'order', ['created_by'], unique=False)
    op.create_index(op.f('ix_order_edited_by'), 'order', ['edited_by'], unique=False)
    op.create_index(op.f('ix_order_id'), 'order', ['id'], unique=False)
    op.create_index(op.f('ix_order_lsn'), 'order', ['lsn'], unique=False)
    op.create_index(op.f('ix_order_number'), 'order', ['number'], unique=False)
    op.create_index(op.f('ix_order_origin_number'), 'order', ['origin_number'], unique=False)
    op.create_index(op.f('ix_order_origin_type'), 'order', ['origin_type'], unique=False)
    op.create_index(op.f('ix_order_partner_id'), 'order', ['partner_id'], unique=False)
    op.create_index(op.f('ix_order_store_id'), 'order', ['store_id'], unique=False)
    op.create_index(op.f('ix_order_user_ids'), 'order', ['user_ids'], unique=False)
    op.create_table('uom',
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('title', sa.String(), nullable=False),
                    sa.Column('uom_category_id', sa.Uuid(), nullable=True),
                    sa.Column('type', sa.String(), nullable=False),
                    sa.Column('ratio', sa.Numeric(precision=12, scale=2), nullable=False),
                    sa.Column('precision', sa.Numeric(precision=12, scale=2), nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.ForeignKeyConstraint(['uom_category_id'], ['uom_category.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_uom_company_id'), 'uom', ['company_id'], unique=False)
    op.create_index(op.f('ix_uom_id'), 'uom', ['id'], unique=False)
    op.create_index(op.f('ix_uom_lsn'), 'uom', ['lsn'], unique=False)
    op.create_index(op.f('ix_uom_title'), 'uom', ['title'], unique=False)
    op.create_index(op.f('ix_uom_type'), 'uom', ['type'], unique=False)
    op.create_table('user',
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('external_number', sa.String(), nullable=True),
                    sa.Column('password', sqlalchemy_utils.types.password.PasswordType(

                    ),
                              nullable=False),
                    sa.Column('email', sqlalchemy_utils.types.email.EmailType(length=255),
                              nullable=True),
                    sa.Column('country', sqlalchemy_utils.types.country.CountryType(length=2),
                              nullable=False),
                    sa.Column('locale', sqlalchemy_utils.types.locale.LocaleType(),
                              nullable=False),
                    sa.Column('phone_number',
                              sqlalchemy_utils.types.phone_number.PhoneNumberType(length=20),
                              nullable=True),
                    sa.Column('nickname', sa.String(), nullable=False),
                    sa.Column('is_admin', sa.Boolean(), nullable=False),
                    sa.Column('type', sa.String(), nullable=False),
                    sa.Column('store_id', sa.Uuid(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=True),
                    sa.Column('company_ids', sa.ARRAY(sa.Uuid()), server_default='{}',
                              nullable=False),
                    sa.Column('role_ids', sa.ARRAY(sa.Uuid()), server_default='{}', nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.ForeignKeyConstraint(['store_id'], ['store.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('email', 'company_ids', name='_user_company_id_uc')
                    )
    op.create_index(op.f('ix_user_company_id'), 'user', ['company_id'], unique=False)
    op.create_index(op.f('ix_user_company_ids'), 'user', ['company_ids'], unique=False)
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    op.create_index(op.f('ix_user_lsn'), 'user', ['lsn'], unique=False)
    op.create_index(op.f('ix_user_role_ids'), 'user', ['role_ids'], unique=False)
    op.create_index(op.f('ix_user_store_id'), 'user', ['store_id'], unique=False)
    op.create_table('location',
                    sa.Column('title', sa.String(), nullable=False),
                    sa.Column('store_id', sa.Uuid(), nullable=True),
                    sa.Column('location_class',
                              sa.Enum('PARTNER', 'PLACE', 'RESOURCE', 'PACKAGE', 'ZONE', 'LOST',
                                      'INVENTORY', 'SCRAP', 'SCRAPPED', 'BUFFER',
                                      name='locationclass'), nullable=False),
                    sa.Column('location_type_id', sa.Uuid(), nullable=False),
                    sa.Column('location_id', sa.Uuid(), nullable=True),
                    sa.Column('is_active', sa.Boolean(), nullable=True),
                    sa.Column('allowed_package_ids', sa.ARRAY(sa.Uuid()), server_default='{}',
                              nullable=False),
                    sa.Column('exclude_package_ids', sa.ARRAY(sa.Uuid()), server_default='{}',
                              nullable=False),
                    sa.Column('is_can_negative', sa.Boolean(), server_default=sa.text('false'),
                              nullable=True),
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.Column('lot_id', sa.Uuid(), nullable=True),
                    sa.Column('partner_id', sa.Uuid(), nullable=True),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.ForeignKeyConstraint(['location_id'], ['location.id'], ),
                    sa.ForeignKeyConstraint(['location_type_id'], ['location_type.id'], ),
                    sa.ForeignKeyConstraint(['lot_id'], ['lot.id'], ondelete='SET NULL'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_location_allowed_package_ids'), 'location', ['allowed_package_ids'],
                    unique=False)
    op.create_index(op.f('ix_location_company_id'), 'location', ['company_id'], unique=False)
    op.create_index(op.f('ix_location_exclude_package_ids'), 'location', ['exclude_package_ids'],
                    unique=False)
    op.create_index(op.f('ix_location_id'), 'location', ['id'], unique=False)
    op.create_index(op.f('ix_location_is_can_negative'), 'location', ['is_can_negative'],
                    unique=False)
    op.create_index(op.f('ix_location_location_class'), 'location', ['location_class'],
                    unique=False)
    op.create_index(op.f('ix_location_location_id'), 'location', ['location_id'], unique=False)
    op.create_index(op.f('ix_location_location_type_id'), 'location', ['location_type_id'],
                    unique=False)
    op.create_index(op.f('ix_location_lot_id'), 'location', ['lot_id'], unique=False)
    op.create_index(op.f('ix_location_lsn'), 'location', ['lsn'], unique=False)
    op.create_index(op.f('ix_location_partner_id'), 'location', ['partner_id'], unique=False)
    op.create_index(op.f('ix_location_store_id'), 'location', ['store_id'], unique=False)
    op.create_index(op.f('ix_location_title'), 'location', ['title'], unique=False)
    op.create_table('partner',
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('title', sa.String(), nullable=False),
                    sa.Column('type',
                              sa.Enum('PARTNER', 'CONTACT', 'SUBPARTNER', 'INTERCOMPANY', 'STORE',
                                      'USER', name='partnertype'), nullable=False),
                    sa.Column('external_number', sa.String(), nullable=True),
                    sa.Column('partner_id', sa.Uuid(), nullable=True),
                    sa.Column('phone_number',
                              sqlalchemy_utils.types.phone_number.PhoneNumberType(length=20),
                              nullable=True),
                    sa.Column('email', sqlalchemy_utils.types.email.EmailType(length=255),
                              nullable=True),
                    sa.Column('country', sqlalchemy_utils.types.country.CountryType(length=2),
                              nullable=False),
                    sa.Column('created_by', sa.Uuid(), nullable=False),
                    sa.Column('locale', sqlalchemy_utils.types.locale.LocaleType(),
                              nullable=False),
                    sa.Column('currency', sqlalchemy_utils.types.currency.CurrencyType(length=3),
                              nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
                    sa.ForeignKeyConstraint(['partner_id'], ['partner.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('external_number')
                    )
    op.create_index(op.f('ix_partner_company_id'), 'partner', ['company_id'], unique=False)
    op.create_index(op.f('ix_partner_created_by'), 'partner', ['created_by'], unique=False)
    op.create_index(op.f('ix_partner_id'), 'partner', ['id'], unique=False)
    op.create_index(op.f('ix_partner_lsn'), 'partner', ['lsn'], unique=False)
    op.create_index(op.f('ix_partner_partner_id'), 'partner', ['partner_id'], unique=False)
    op.create_index(op.f('ix_partner_title'), 'partner', ['title'], unique=False)
    op.create_table('product',
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('title', sa.String(), nullable=False),
                    sa.Column('description', sa.String(), nullable=True),
                    sa.Column('image_url', sa.String(), nullable=True),
                    sa.Column('external_number', sa.String(), nullable=True),
                    sa.Column('product_type', sa.String(), nullable=False),
                    sa.Column('uom_id', sa.Uuid(), nullable=False),
                    sa.Column('product_category_id', sa.Uuid(), nullable=False),
                    sa.Column('barcode_list', postgresql.ARRAY(sa.String()), server_default='{}',
                              nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.ForeignKeyConstraint(['product_category_id'], ['product_category.id'], ),
                    sa.ForeignKeyConstraint(['uom_id'], ['uom.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('external_number', 'company_id',
                                        name='_product_company_id_uc')
                    )
    op.create_index(op.f('ix_product_barcode_list'), 'product', ['barcode_list'], unique=False)
    op.create_index(op.f('ix_product_company_id'), 'product', ['company_id'], unique=False)
    op.create_index(op.f('ix_product_id'), 'product', ['id'], unique=False)
    op.create_index(op.f('ix_product_lsn'), 'product', ['lsn'], unique=False)
    op.create_index(op.f('ix_product_product_category_id'), 'product', ['product_category_id'],
                    unique=False)
    op.create_index(op.f('ix_product_title'), 'product', ['title'], unique=False)
    op.create_index(op.f('ix_product_uom_id'), 'product', ['uom_id'], unique=False)
    op.create_table('move_log',
                    sa.Column('product_id', sa.Uuid(), nullable=False),
                    sa.Column('store_id', sa.Uuid(), nullable=False),
                    sa.Column('location_class',
                              sa.Enum('PARTNER', 'PLACE', 'RESOURCE', 'PACKAGE', 'ZONE', 'LOST',
                                      'INVENTORY', 'SCRAP', 'SCRAPPED', 'BUFFER',
                                      name='locationclass'), nullable=False),
                    sa.Column('location_type_id', sa.Uuid(), nullable=False),
                    sa.Column('location_id', sa.Uuid(), nullable=True),
                    sa.Column('lot_id', sa.Uuid(), nullable=True),
                    sa.Column('partner_id', sa.Uuid(), nullable=True),
                    sa.Column('quantity', sa.Float(), nullable=False),
                    sa.Column('reserved_quantity', sa.Float(), nullable=False),
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.ForeignKeyConstraint(['location_id'], ['location.id'], ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(['location_type_id'], ['location_type.id'],
                                            ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(['lot_id'], ['lot.id'], ondelete='SET NULL'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_move_log_company_id'), 'move_log', ['company_id'], unique=False)
    op.create_index(op.f('ix_move_log_id'), 'move_log', ['id'], unique=False)
    op.create_index(op.f('ix_move_log_location_class'), 'move_log', ['location_class'],
                    unique=False)
    op.create_index(op.f('ix_move_log_location_id'), 'move_log', ['location_id'], unique=False)
    op.create_index(op.f('ix_move_log_location_type_id'), 'move_log', ['location_type_id'],
                    unique=False)
    op.create_index(op.f('ix_move_log_lot_id'), 'move_log', ['lot_id'], unique=False)
    op.create_index(op.f('ix_move_log_lsn'), 'move_log', ['lsn'], unique=False)
    op.create_index(op.f('ix_move_log_partner_id'), 'move_log', ['partner_id'], unique=False)
    op.create_index(op.f('ix_move_log_product_id'), 'move_log', ['product_id'], unique=False)
    op.create_index(op.f('ix_move_log_store_id'), 'move_log', ['store_id'], unique=False)
    op.create_table('quant',
                    sa.Column('quantity', sa.Float(), nullable=False),
                    sa.Column('reserved_quantity', sa.Float(), nullable=False),
                    sa.Column('incoming_quantity', sa.Float(), nullable=False),
                    sa.Column('expiration_datetime', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('uom_id', sa.Uuid(), nullable=False),
                    sa.Column('move_ids', sa.ARRAY(sa.Uuid()), server_default='{}', nullable=False),
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.Column('product_id', sa.Uuid(), nullable=False),
                    sa.Column('location_type_id', sa.Uuid(), nullable=True),
                    sa.Column('location_id', sa.Uuid(), nullable=True),
                    sa.Column('store_id', sa.Uuid(), nullable=False),
                    sa.Column('location_class',
                              sa.Enum('PARTNER', 'PLACE', 'RESOURCE', 'PACKAGE', 'ZONE', 'LOST',
                                      'INVENTORY', 'SCRAP', 'SCRAPPED', 'BUFFER',
                                      name='locationclass'), nullable=False),
                    sa.Column('lot_id', sa.Uuid(), nullable=True),
                    sa.Column('partner_id', sa.Uuid(), nullable=True),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.ForeignKeyConstraint(['location_id'], ['location.id'], ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(['location_type_id'], ['location_type.id'],
                                            ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(['lot_id'], ['lot.id'], ondelete='SET NULL'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('store_id', 'location_id', 'lot_id', 'expiration_datetime',
                                        name='_quant_st_loc_lot_ex_id_uc')
                    )
    op.create_index(op.f('ix_quant_company_id'), 'quant', ['company_id'], unique=False)
    op.create_index(op.f('ix_quant_id'), 'quant', ['id'], unique=False)
    op.create_index(op.f('ix_quant_location_class'), 'quant', ['location_class'], unique=False)
    op.create_index(op.f('ix_quant_location_id'), 'quant', ['location_id'], unique=False)
    op.create_index(op.f('ix_quant_location_type_id'), 'quant', ['location_type_id'], unique=False)
    op.create_index(op.f('ix_quant_lot_id'), 'quant', ['lot_id'], unique=False)
    op.create_index(op.f('ix_quant_lsn'), 'quant', ['lsn'], unique=False)
    op.create_index(op.f('ix_quant_move_ids'), 'quant', ['move_ids'], unique=False)
    op.create_index(op.f('ix_quant_partner_id'), 'quant', ['partner_id'], unique=False)
    op.create_index(op.f('ix_quant_product_id'), 'quant', ['product_id'], unique=False)
    op.create_index(op.f('ix_quant_store_id'), 'quant', ['store_id'], unique=False)
    op.create_index(op.f('ix_quant_uom_id'), 'quant', ['uom_id'], unique=False)
    op.create_table('move',
                    sa.Column('type', sa.Enum('PRODUCT', 'PACKAGE', name='movetype'),
                              nullable=False),
                    sa.Column('move_id', sa.Uuid(), nullable=True),
                    sa.Column('store_id', sa.Uuid(), nullable=False),
                    sa.Column('order_type_id', sa.Uuid(), nullable=True),
                    sa.Column('order_id', sa.Uuid(), nullable=True),
                    sa.Column('location_src_id', sa.Uuid(), nullable=True),
                    sa.Column('location_dest_id', sa.Uuid(), nullable=True),
                    sa.Column('lot_id', sa.Uuid(), nullable=True),
                    sa.Column('location_id', sa.Uuid(), nullable=True),
                    sa.Column('product_id', sa.Uuid(), nullable=True),
                    sa.Column('partner_id', sa.Uuid(), nullable=True),
                    sa.Column('quantity', sa.Float(), nullable=False),
                    sa.Column('uom_id', sa.Uuid(), nullable=False),
                    sa.Column('quant_src_id', sa.Uuid(), nullable=True),
                    sa.Column('quant_dest_id', sa.Uuid(), nullable=True),
                    sa.Column('status',
                              sa.Enum('CREATED', 'CONFIRMED', 'WAITING', 'ASSIGNED', 'PROCESSING',
                                      'DONE', 'CANCELED', name='movestatus'), nullable=False),
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.Column('created_by', sa.Uuid(), nullable=False),
                    sa.Column('edited_by', sa.Uuid(), nullable=False),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.ForeignKeyConstraint(['location_dest_id'], ['location.id'],
                                            ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(['location_id'], ['location.id'], ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(['location_src_id'], ['location.id'],
                                            ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(['lot_id'], ['lot.id'], ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(['move_id'], ['move.id'], ondelete='RESTRICT'),
                    sa.ForeignKeyConstraint(['order_id'], ['order.id'], ondelete='RESTRICT'),
                    sa.ForeignKeyConstraint(['order_type_id'], ['order_type.id'],
                                            ondelete='RESTRICT'),
                    sa.ForeignKeyConstraint(['quant_dest_id'], ['quant.id'], ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(['quant_src_id'], ['quant.id'], ondelete='SET NULL'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_move_company_id'), 'move', ['company_id'], unique=False)
    op.create_index(op.f('ix_move_created_by'), 'move', ['created_by'], unique=False)
    op.create_index(op.f('ix_move_edited_by'), 'move', ['edited_by'], unique=False)
    op.create_index(op.f('ix_move_id'), 'move', ['id'], unique=False)
    op.create_index(op.f('ix_move_lsn'), 'move', ['lsn'], unique=False)
    op.create_index(op.f('ix_move_partner_id'), 'move', ['partner_id'], unique=False)
    op.create_index(op.f('ix_move_product_id'), 'move', ['product_id'], unique=False)
    op.create_index(op.f('ix_move_quant_dest_id'), 'move', ['quant_dest_id'], unique=False)
    op.create_index(op.f('ix_move_quant_src_id'), 'move', ['quant_src_id'], unique=False)
    op.create_index(op.f('ix_move_store_id'), 'move', ['store_id'], unique=False)
    op.create_index(op.f('ix_move_uom_id'), 'move', ['uom_id'], unique=False)
    op.create_table('suggest',
                    sa.Column('move_id', sa.Uuid(), nullable=False),
                    sa.Column('priority', sa.Integer(), nullable=False),
                    sa.Column('type',
                              sa.Enum('IN_QUANTITY', 'IN_PRODUCT', 'IN_PACKAGE', 'IN_LOCATION',
                                      'IN_LOT', 'IN_RESOURCE', 'IN_VALID', 'NEW_PACKAGE', 'NEW_LOT',
                                      name='suggesttype'), nullable=False),
                    sa.Column('value', sa.String(), nullable=True),
                    sa.Column('result_value', sa.String(), nullable=True),
                    sa.Column('user_id', sa.Uuid(), nullable=True),
                    sa.Column('status', sa.Enum('WAITING', 'DONE', name='suggeststatus'),
                              nullable=False),
                    sa.Column('id', sa.Uuid(), nullable=False),
                    sa.Column('lsn', sa.BigInteger(), nullable=True),
                    sa.Column('company_id', sa.Uuid(), nullable=False),
                    sa.Column('created_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(),
                              server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
                              nullable=True),
                    sa.Column('vars', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
                    sa.ForeignKeyConstraint(['move_id'], ['move.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_suggest_company_id'), 'suggest', ['company_id'], unique=False)
    op.create_index(op.f('ix_suggest_id'), 'suggest', ['id'], unique=False)
    op.create_index(op.f('ix_suggest_lsn'), 'suggest', ['lsn'], unique=False)
    op.create_index(op.f('ix_suggest_move_id'), 'suggest', ['move_id'], unique=False)
    op.create_index(op.f('ix_suggest_status'), 'suggest', ['status'], unique=False)
    op.create_index(op.f('ix_suggest_user_id'), 'suggest', ['user_id'], unique=False)
    # ### end Alembic commands ###
    op.execute("create sequence suggest_lsn_seq")
    op.execute("create sequence order_type_lsn_seq")
    op.execute("create sequence order_lsn_seq")
    op.execute("create sequence move_lsn_seq")
    op.execute("create sequence move_log_lsn_seq")
    op.execute("create sequence location_lsn_seq")
    op.execute("create sequence location_type_lsn_seq")
    op.execute("create sequence lot_lsn_seq")
    op.execute("create sequence product_storage_type_lsn_seq")
    op.execute("create sequence quant_lsn_seq")
    op.execute("create sequence channel_lsn_seq")
    op.execute("create sequence product_lsn_seq")
    op.execute("create sequence product_category_lsn_seq")
    op.execute("create sequence permission_lsn_seq")
    op.execute("create sequence role_lsn_seq")
    op.execute("create sequence partner_lsn_seq")
    op.execute("create sequence uom_lsn_seq")
    op.execute("create sequence uom_category_lsn_seq")
    op.execute("create sequence company_lsn_seq")
    op.execute("create sequence user_lsn_seq")
    op.execute("create sequence store_lsn_seq")
    op.execute("create sequence storage_type_lsn_seq")
    op.execute("create sequence bus_lsn_seq")


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_suggest_user_id'), table_name='suggest')
    op.drop_index(op.f('ix_suggest_status'), table_name='suggest')
    op.drop_index(op.f('ix_suggest_move_id'), table_name='suggest')
    op.drop_index(op.f('ix_suggest_lsn'), table_name='suggest')
    op.drop_index(op.f('ix_suggest_id'), table_name='suggest')
    op.drop_index(op.f('ix_suggest_company_id'), table_name='suggest')
    op.drop_table('suggest')
    op.drop_index(op.f('ix_move_uom_id'), table_name='move')
    op.drop_index(op.f('ix_move_store_id'), table_name='move')
    op.drop_index(op.f('ix_move_quant_src_id'), table_name='move')
    op.drop_index(op.f('ix_move_quant_dest_id'), table_name='move')
    op.drop_index(op.f('ix_move_product_id'), table_name='move')
    op.drop_index(op.f('ix_move_partner_id'), table_name='move')
    op.drop_index(op.f('ix_move_lsn'), table_name='move')
    op.drop_index(op.f('ix_move_id'), table_name='move')
    op.drop_index(op.f('ix_move_edited_by'), table_name='move')
    op.drop_index(op.f('ix_move_created_by'), table_name='move')
    op.drop_index(op.f('ix_move_company_id'), table_name='move')
    op.drop_table('move')
    op.drop_index(op.f('ix_quant_uom_id'), table_name='quant')
    op.drop_index(op.f('ix_quant_store_id'), table_name='quant')
    op.drop_index(op.f('ix_quant_product_id'), table_name='quant')
    op.drop_index(op.f('ix_quant_partner_id'), table_name='quant')
    op.drop_index(op.f('ix_quant_move_ids'), table_name='quant')
    op.drop_index(op.f('ix_quant_lsn'), table_name='quant')
    op.drop_index(op.f('ix_quant_lot_id'), table_name='quant')
    op.drop_index(op.f('ix_quant_location_type_id'), table_name='quant')
    op.drop_index(op.f('ix_quant_location_id'), table_name='quant')
    op.drop_index(op.f('ix_quant_location_class'), table_name='quant')
    op.drop_index(op.f('ix_quant_id'), table_name='quant')
    op.drop_index(op.f('ix_quant_company_id'), table_name='quant')
    op.drop_table('quant')
    op.drop_index(op.f('ix_move_log_store_id'), table_name='move_log')
    op.drop_index(op.f('ix_move_log_product_id'), table_name='move_log')
    op.drop_index(op.f('ix_move_log_partner_id'), table_name='move_log')
    op.drop_index(op.f('ix_move_log_lsn'), table_name='move_log')
    op.drop_index(op.f('ix_move_log_lot_id'), table_name='move_log')
    op.drop_index(op.f('ix_move_log_location_type_id'), table_name='move_log')
    op.drop_index(op.f('ix_move_log_location_id'), table_name='move_log')
    op.drop_index(op.f('ix_move_log_location_class'), table_name='move_log')
    op.drop_index(op.f('ix_move_log_id'), table_name='move_log')
    op.drop_index(op.f('ix_move_log_company_id'), table_name='move_log')
    op.drop_table('move_log')
    op.drop_index(op.f('ix_product_uom_id'), table_name='product')
    op.drop_index(op.f('ix_product_title'), table_name='product')
    op.drop_index(op.f('ix_product_product_category_id'), table_name='product')
    op.drop_index(op.f('ix_product_lsn'), table_name='product')
    op.drop_index(op.f('ix_product_id'), table_name='product')
    op.drop_index(op.f('ix_product_company_id'), table_name='product')
    op.drop_index(op.f('ix_product_barcode_list'), table_name='product')
    op.drop_table('product')
    op.drop_index(op.f('ix_partner_title'), table_name='partner')
    op.drop_index(op.f('ix_partner_partner_id'), table_name='partner')
    op.drop_index(op.f('ix_partner_lsn'), table_name='partner')
    op.drop_index(op.f('ix_partner_id'), table_name='partner')
    op.drop_index(op.f('ix_partner_created_by'), table_name='partner')
    op.drop_index(op.f('ix_partner_company_id'), table_name='partner')
    op.drop_table('partner')
    op.drop_index(op.f('ix_location_title'), table_name='location')
    op.drop_index(op.f('ix_location_store_id'), table_name='location')
    op.drop_index(op.f('ix_location_partner_id'), table_name='location')
    op.drop_index(op.f('ix_location_lsn'), table_name='location')
    op.drop_index(op.f('ix_location_lot_id'), table_name='location')
    op.drop_index(op.f('ix_location_location_type_id'), table_name='location')
    op.drop_index(op.f('ix_location_location_id'), table_name='location')
    op.drop_index(op.f('ix_location_location_class'), table_name='location')
    op.drop_index(op.f('ix_location_is_can_negative'), table_name='location')
    op.drop_index(op.f('ix_location_id'), table_name='location')
    op.drop_index(op.f('ix_location_exclude_package_ids'), table_name='location')
    op.drop_index(op.f('ix_location_company_id'), table_name='location')
    op.drop_index(op.f('ix_location_allowed_package_ids'), table_name='location')
    op.drop_table('location')
    op.drop_index(op.f('ix_user_store_id'), table_name='user')
    op.drop_index(op.f('ix_user_role_ids'), table_name='user')
    op.drop_index(op.f('ix_user_lsn'), table_name='user')
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_index(op.f('ix_user_company_ids'), table_name='user')
    op.drop_index(op.f('ix_user_company_id'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_uom_type'), table_name='uom')
    op.drop_index(op.f('ix_uom_title'), table_name='uom')
    op.drop_index(op.f('ix_uom_lsn'), table_name='uom')
    op.drop_index(op.f('ix_uom_id'), table_name='uom')
    op.drop_index(op.f('ix_uom_company_id'), table_name='uom')
    op.drop_table('uom')
    op.drop_index(op.f('ix_order_user_ids'), table_name='order')
    op.drop_index(op.f('ix_order_store_id'), table_name='order')
    op.drop_index(op.f('ix_order_partner_id'), table_name='order')
    op.drop_index(op.f('ix_order_origin_type'), table_name='order')
    op.drop_index(op.f('ix_order_origin_number'), table_name='order')
    op.drop_index(op.f('ix_order_number'), table_name='order')
    op.drop_index(op.f('ix_order_lsn'), table_name='order')
    op.drop_index(op.f('ix_order_id'), table_name='order')
    op.drop_index(op.f('ix_order_edited_by'), table_name='order')
    op.drop_index(op.f('ix_order_created_by'), table_name='order')
    op.drop_index(op.f('ix_order_company_id'), table_name='order')
    op.drop_table('order')
    op.drop_index(op.f('ix_location_type_title'), table_name='location_type')
    op.drop_index(op.f('ix_location_type_store_id'), table_name='location_type')
    op.drop_index(op.f('ix_location_type_partner_id'), table_name='location_type')
    op.drop_index(op.f('ix_location_type_lsn'), table_name='location_type')
    op.drop_index(op.f('ix_location_type_lot_id'), table_name='location_type')
    op.drop_index(op.f('ix_location_type_location_class'), table_name='location_type')
    op.drop_index(op.f('ix_location_type_is_homogeneity'), table_name='location_type')
    op.drop_index(op.f('ix_location_type_is_can_negative'), table_name='location_type')
    op.drop_index(op.f('ix_location_type_id'), table_name='location_type')
    op.drop_index(op.f('ix_location_type_exclude_package_ids'), table_name='location_type')
    op.drop_index(op.f('ix_location_type_company_id'), table_name='location_type')
    op.drop_index(op.f('ix_location_type_allowed_package_ids'), table_name='location_type')
    op.drop_table('location_type')
    op.drop_index(op.f('ix_uom_category_title'), table_name='uom_category')
    op.drop_index(op.f('ix_uom_category_lsn'), table_name='uom_category')
    op.drop_index(op.f('ix_uom_category_id'), table_name='uom_category')
    op.drop_index(op.f('ix_uom_category_company_id'), table_name='uom_category')
    op.drop_table('uom_category')
    op.drop_index(op.f('ix_store_title'), table_name='store')
    op.drop_index(op.f('ix_store_lsn'), table_name='store')
    op.drop_index(op.f('ix_store_id'), table_name='store')
    op.drop_index(op.f('ix_store_company_id'), table_name='store')
    op.drop_table('store')
    op.drop_index(op.f('ix_storage_type_lsn'), table_name='storage_type')
    op.drop_index(op.f('ix_storage_type_id'), table_name='storage_type')
    op.drop_index(op.f('ix_storage_type_company_id'), table_name='storage_type')
    op.drop_table('storage_type')
    op.drop_index(op.f('ix_role_title'), table_name='role')
    op.drop_index(op.f('ix_role_role_ids'), table_name='role')
    op.drop_index(op.f('ix_role_permission_allow_list'), table_name='role')
    op.drop_index(op.f('ix_role_lsn'), table_name='role')
    op.drop_index(op.f('ix_role_id'), table_name='role')
    op.drop_index(op.f('ix_role_company_id'), table_name='role')
    op.drop_table('role')
    op.drop_index(op.f('ix_product_storage_type_product_id'), table_name='product_storage_type')
    op.drop_index(op.f('ix_product_storage_type_lsn'), table_name='product_storage_type')
    op.drop_index(op.f('ix_product_storage_type_id'), table_name='product_storage_type')
    op.drop_index(op.f('ix_product_storage_type_exclude_package_ids'),
                  table_name='product_storage_type')
    op.drop_index(op.f('ix_product_storage_type_company_id'), table_name='product_storage_type')
    op.drop_index(op.f('ix_product_storage_type_allowed_package_ids'),
                  table_name='product_storage_type')
    op.drop_table('product_storage_type')
    op.drop_index(op.f('ix_product_category_title'), table_name='product_category')
    op.drop_index(op.f('ix_product_category_product_category_ids'), table_name='product_category')
    op.drop_index(op.f('ix_product_category_lsn'), table_name='product_category')
    op.drop_index(op.f('ix_product_category_id'), table_name='product_category')
    op.drop_index(op.f('ix_product_category_company_id'), table_name='product_category')
    op.drop_table('product_category')
    op.drop_index(op.f('ix_order_type_title'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_store_id'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_prefix'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_partner_id'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_lsn'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_id'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_exclude_package_ids'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_exclude_location_type_src_ids'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_exclude_location_type_dest_ids'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_exclude_location_src_ids'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_exclude_location_dest_ids'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_exclude_location_class_src_ids'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_exclude_location_class_dest_ids'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_edited_by'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_created_by'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_company_id'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_allowed_package_ids'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_allowed_location_type_src_ids'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_allowed_location_type_dest_ids'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_allowed_location_src_ids'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_allowed_location_dest_ids'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_allowed_location_class_src_ids'), table_name='order_type')
    op.drop_index(op.f('ix_order_type_allowed_location_class_dest_ids'), table_name='order_type')
    op.drop_table('order_type')
    op.drop_index(op.f('ix_lot_product_id'), table_name='lot')
    op.drop_index(op.f('ix_lot_partner_id'), table_name='lot')
    op.drop_index(op.f('ix_lot_lsn'), table_name='lot')
    op.drop_index(op.f('ix_lot_id'), table_name='lot')
    op.drop_index(op.f('ix_lot_company_id'), table_name='lot')
    op.drop_table('lot')
    op.drop_index(op.f('ix_bus_status'), table_name='bus')
    op.drop_index(op.f('ix_bus_lsn'), table_name='bus')
    op.drop_index(op.f('ix_bus_id'), table_name='bus')
    op.drop_index(op.f('ix_bus_company_id'), table_name='bus')
    op.drop_index(op.f('ix_bus_cache_tag'), table_name='bus')
    op.drop_table('bus')
    op.drop_index(op.f('ix_company_title'), table_name='company')
    op.drop_index(op.f('ix_company_lsn'), table_name='company')
    op.drop_index(op.f('ix_company_id'), table_name='company')
    op.drop_table('company')
    # ### end Alembic commands ###
    op.execute("drop sequence suggest_lsn_seq")
    op.execute("drop sequence order_type_lsn_seq")
    op.execute("drop sequence order_lsn_seq")
    op.execute("drop sequence move_lsn_seq")
    op.execute("drop sequence move_log_lsn_seq")
    op.execute("drop sequence location_lsn_seq")
    op.execute("drop sequence location_type_lsn_seq")
    op.execute("drop sequence lot_lsn_seq")
    op.execute("drop sequence product_storage_type_lsn_seq")
    op.execute("drop sequence quant_lsn_seq")
    op.execute("drop sequence channel_lsn_seq")
    op.execute("drop sequence product_lsn_seq")
    op.execute("drop sequence product_category_lsn_seq")
    op.execute("drop sequence permission_lsn_seq")
    op.execute("drop sequence role_lsn_seq")
    op.execute("drop sequence partner_lsn_seq")
    op.execute("drop sequence uom_lsn_seq")
    op.execute("drop sequence uom_category_lsn_seq")
    op.execute("drop sequence company_lsn_seq")
    op.execute("drop sequence user_lsn_seq")
    op.execute("drop sequence contractor_lsn_seq")
    op.execute("drop sequence store_lsn_seq")
    op.execute("drop sequence storage_type_lsn_seq")
    op.execute("drop sequence bus_lsn_seq")
